---
AWSTemplateFormatVersion: '2010-09-09'

# Any code, applications, scripts, templates, proofs of concept,
# documentation and other items are provided for illustration purposes only.
#
# Copyright 2017 Ryan
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Parameters:

  VpcStackName:
    Type: String
    Description: "VPC stack name"

  BaseDomainName:
    Type: String
    MinLength: 1
    MaxLength: 255
    Default: "miniplen.com."
    Description: "Base domain name"

Resources:

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}"
      GroupDescription: !Sub "${AWS::StackName}"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-vpc-id"
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${VpcStackName}-public-subnet-1-id"
        - Fn::ImportValue: !Sub "${VpcStackName}-public-subnet-2-id"
      SecurityGroups:
        - !Ref AlbSecurityGroup

    DependsOn:
      - AlbSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NotFoundTargetGroup
    DependsOn:
      - LoadBalancer
      - NotFoundTargetGroup

  NotFoundTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-vpc-id"
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 404
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
    DependsOn: LoadBalancer

  NotFoundListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /404
      Actions:
        - TargetGroupArn: !Ref NotFoundTargetGroup
          Type: forward
    DependsOn:
      - LoadBalancerListener
      - NotFoundTargetGroup

  AlbCname:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref BaseDomainName
      Name: !Sub "${AWS::StackName}.${BaseDomainName}"
      Type: 'CNAME'
      TTL: '300'
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName
    DependsOn: LoadBalancer

Outputs:

  Name:
    Value: !Sub "${AWS::StackName}"
    Export:
      Name: !Sub "${AWS::StackName}-name"

  NotFoundTargetGroupArn:
    Value: !Ref NotFoundTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-404-target-group-arn"

  NotFoundTargetGroupFullName:
    Value: !GetAtt NotFoundTargetGroup.TargetGroupFullName
    Export:
      Name: !Sub "${AWS::StackName}-404-target-group-full-name"

  ServiceUrl:
    Description: URL of the load balancer for the sample service.
    Value: !Sub "http://${LoadBalancer.DNSName}"
    Export:
      Name: !Sub "${AWS::StackName}-alb-service-url"

  LoadBalancerArn:
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub "${AWS::StackName}-load-balancer-arn"

  LoadBalancerDnsName:
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-load-balancer-dns-name"

  LoadBalancerName:
    Value: !GetAtt LoadBalancer.LoadBalancerName
    Export:
      Name: !Sub "${AWS::StackName}-load-balancer-name"

  SecurityGroupName:
    Value: !Ref AlbSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-alb-security-group-name"

  SecurityGroupId:
    Value: !GetAtt AlbSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-alb-security-group-id"

  LoadBalancerListenerArn:
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Sub "${AWS::StackName}-alb-listener-arn"

