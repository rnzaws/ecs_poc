---
AWSTemplateFormatVersion: '2010-09-09'

# Any code, applications, scripts, templates, proofs of concept,
# documentation and other items are provided for illustration purposes only.
#
# Copyright 2017 Amazon Web Services
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Parameters:

  GitHubSourceRepo:
    Type: String
    Default: "ecs-demo-php-simple-app"

  GitHubBranch:
    Type: String
    Default: "master"

  GitHubToken:
    Type: String

  GitHubUser:
    Type: String
    Default: "rnzaws"

  BuildDockerImage:
    Type: String
    Default: "aws/codebuild/docker:1.12.1"

  TaskName:
    Type: String
    Default: "default"

  EcsClusterStackName:
    Type: String
    MinLength: 1
    MaxLength: 100
    Description: "ECS cluster stack name"

  VpcStackName:
    Type: String
    MinLength: 1
    MaxLength: 100
    Description: "Vpc stack name"

  ServiceStackName:
    Type: String
    MinLength: 1
    MaxLength: 100
    Description: "ECS service stack name"

  AlbStackName:
    Type: String
    MinLength: 1
    MaxLength: 100
    Description: "Application Load Balancer stack name"

  CiRepositoryStackName:
    Type: String
    MinLength: 1
    MaxLength: 100
    Description: "CI repostiory stack name"

Resources:

  CloudFormationExecutionRole:
    Type: "AWS::IAM::Role"
    DeletionPolicy: Delete
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - "ecs:*"
                  - "ecr:*"
                  - "iam:*"
                  - "elasticloadbalancing:*"

  CodeBuildServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:GetObjectVersion"
              - Resource: !Sub
                  - "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RepositoryName}"
                  - RepositoryName:
                      "Fn::ImportValue": !Sub "${CiRepositoryStackName}-repository-name"
                Effect: Allow
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:PutImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"

  CodePipelineServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub "arn:aws:s3:::${ArtifactBucket}/*"
                Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
              - Resource: "*"
                Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                  - "cloudformation:*"
                  - "iam:PassRole"

  ArtifactBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete

  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Location: !Ref ArtifactBucket
        Type: "S3"
      Source:
        Location: !Sub "${ArtifactBucket}/source.zip"
        Type: "S3"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: !Ref BuildDockerImage
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub
              - "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}"
              - RepositoryName:
                    "Fn::ImportValue": !Sub "${CiRepositoryStackName}-repository-name"
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubSourceRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
                ActionMode: "CREATE_UPDATE"
                StackName: !Sub "${ServiceStackName}"
                Capabilities: "CAPABILITY_NAMED_IAM"
                TemplatePath: App::ops/cfn/service.cfn.yml
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                ParameterOverrides: !Sub
                  - |
                    {
                      "TaskName": "${TaskName}",
                      "Tag" : { "Fn::GetParam" : [ "BuildOutput", "build.json", "tag" ] },
                      "DesiredCount": "1",
                      "EcsClusterName": "${EcsClusterName}",
                      "CiRepositoryName": "${CiRepositoryName}",
                      "LoadBalancerListenerArn": "${LoadBalancerListenerArn}",
                      "VpcId": "${VpcId}",
                      "TargetGroupArn": "${TargetGroupArn}"
                    }
                  - EcsClusterName:
                      "Fn::ImportValue": !Sub "${EcsClusterStackName}-ecs-cluster-name"
                    CiRepositoryName:
                      "Fn::ImportValue": !Sub "${CiRepositoryStackName}-repository-name"
                    LoadBalancerListenerArn:
                      "Fn::ImportValue": !Sub "${AlbStackName}-alb-listener-arn"
                    TargetGroupArn:
                      "Fn::ImportValue": !Sub "${AlbStackName}-not-found-target-group-arn"
                    VpcId:
                      "Fn::ImportValue": !Sub "${VpcStackName}-vpc-id"
              InputArtifacts:
                - Name: App
                - Name: BuildOutput
              RunOrder: 1

Outputs:

  PipelineUrl:
    Value: !Sub "https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}"
    Export:
      Name: !Sub "${AWS::StackName}-pipeline-url"



